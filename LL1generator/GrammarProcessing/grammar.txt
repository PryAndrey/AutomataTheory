<Z> -> <program>⟂
<program> -> PROGRAM IDENTIFIER SEMICOLON <declarations> <block> DOT
<declarations> -> <var_decl> | ε
<var_decl> -> VAR <var_list>
<var_list> -> <var_def> <var_list_tail>
<var_list_tail> -> SEMICOLON <var_def> <var_list_tail> | ε
<var_def> -> <id_list> COLON <type>
<id_list> -> IDENTIFIER <id_list_tail>
<id_list_tail> -> COMMA IDENTIFIER <id_list_tail> | ε
<type> -> INTEGER | ARRAY LEFT_BRACKET INT DOT DOT INT RIGHT_BRACKET OF INTEGER
<block> -> BEGIN <stmt_list> END
<stmt_list> -> <stmt> <stmt_list_tail>
<stmt_list_tail> -> SEMICOLON <stmt> <stmt_list_tail> | ε
<stmt> -> <simple_stmt> | <compound_stmt>
<simple_stmt> -> <assign_stmt> | ε
<assign_stmt> -> IDENTIFIER <assign_stmt_T1>
<assign_stmt_T1> -> <array_access> <assign_stmt_T2> | <assign_stmt_T2>
<assign_stmt_T2> -> ASSIGN <expr>
<expr> -> <term> <expr_tail>
<expr_tail> -> <add_op> <term> <expr_tail> | ε
<add_op> -> PLUS | MINUS
<term> -> <factor> <term_tail>
<term_tail> -> <mul_op> <factor> <term_tail> | ε
<mul_op> -> MULTIPLICATION | DIVIDE
<factor> -> INT | LEFT_PAREN <expr> RIGHT_PAREN | IDENTIFIER <factor_T1>
<factor_T1> -> <array_access> | ε
<array_access> -> LEFT_BRACKET <expr> RIGHT_BRACKET
<compound_stmt> -> <if_stmt> | <repeat_stmt>
<if_stmt> -> IF <expr> THEN <stmt> <else_part>
<else_part> -> ELSE <stmt> | ε
<repeat_stmt> -> REPEAT <stmt_list> UNTIL <expr>